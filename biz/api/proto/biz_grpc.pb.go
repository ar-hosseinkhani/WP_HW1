// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: biz.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BizClient is the client API for Biz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BizClient interface {
	GetUsers(ctx context.Context, in *RequestGetUsers, opts ...grpc.CallOption) (*ResponseGetUsers, error)
	GetUsersWithSqlInjection(ctx context.Context, in *RequestGetUsersWithSQLInjection, opts ...grpc.CallOption) (*ResponseGetUsers, error)
}

type bizClient struct {
	cc grpc.ClientConnInterface
}

func NewBizClient(cc grpc.ClientConnInterface) BizClient {
	return &bizClient{cc}
}

func (c *bizClient) GetUsers(ctx context.Context, in *RequestGetUsers, opts ...grpc.CallOption) (*ResponseGetUsers, error) {
	out := new(ResponseGetUsers)
	err := c.cc.Invoke(ctx, "/auth.Biz/get_users", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizClient) GetUsersWithSqlInjection(ctx context.Context, in *RequestGetUsersWithSQLInjection, opts ...grpc.CallOption) (*ResponseGetUsers, error) {
	out := new(ResponseGetUsers)
	err := c.cc.Invoke(ctx, "/auth.Biz/get_users_with_sql_injection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizServer is the server API for Biz service.
// All implementations must embed UnimplementedBizServer
// for forward compatibility
type BizServer interface {
	GetUsers(context.Context, *RequestGetUsers) (*ResponseGetUsers, error)
	GetUsersWithSqlInjection(context.Context, *RequestGetUsersWithSQLInjection) (*ResponseGetUsers, error)
	mustEmbedUnimplementedBizServer()
}

// UnimplementedBizServer must be embedded to have forward compatible implementations.
type UnimplementedBizServer struct {
}

func (UnimplementedBizServer) GetUsers(context.Context, *RequestGetUsers) (*ResponseGetUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedBizServer) GetUsersWithSqlInjection(context.Context, *RequestGetUsersWithSQLInjection) (*ResponseGetUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWithSqlInjection not implemented")
}
func (UnimplementedBizServer) mustEmbedUnimplementedBizServer() {}

// UnsafeBizServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BizServer will
// result in compilation errors.
type UnsafeBizServer interface {
	mustEmbedUnimplementedBizServer()
}

func RegisterBizServer(s grpc.ServiceRegistrar, srv BizServer) {
	s.RegisterService(&Biz_ServiceDesc, srv)
}

func _Biz_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Biz/get_users",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServer).GetUsers(ctx, req.(*RequestGetUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biz_GetUsersWithSqlInjection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetUsersWithSQLInjection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServer).GetUsersWithSqlInjection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Biz/get_users_with_sql_injection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServer).GetUsersWithSqlInjection(ctx, req.(*RequestGetUsersWithSQLInjection))
	}
	return interceptor(ctx, in, info, handler)
}

// Biz_ServiceDesc is the grpc.ServiceDesc for Biz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Biz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Biz",
	HandlerType: (*BizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_users",
			Handler:    _Biz_GetUsers_Handler,
		},
		{
			MethodName: "get_users_with_sql_injection",
			Handler:    _Biz_GetUsersWithSqlInjection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "biz.proto",
}
